{"version":3,"sources":["sounds/buzzSound.mp3","api.js","components/Entrance.js","components/Header.js","components/Buzzer.js","components/Lobby.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","socket","socketId","id","io","Entrance","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playerName","roomCode","handlePlayerNameChange","bind","assertThisInitialized","handleRoomCodeChange","handleCreateRoom","handleJoinRoom","event","setState","target","value","toUpperCase","emit","roomId","react_default","a","createElement","className","type","placeholder","onChange","onClick","Component","Header","class","title","Buzzer","timeLeft","timerInterval","handleBuzz","_this2","setTimeout","decrementTimer","room","toFixed","isBuzzed","lastBuzzId","lastBuzzName","Lobby","src_components_Header","values","players","map","player","key","name","src_components_Buzzer","react_howler_lib_default","src","buzzSound","playing","preload","loop","ref","App","callback","data","thisPlayer","on","keys","length","src_components_Entrance","stage","src_components_Lobby","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa3976b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/buzzSound.818228c0.mp3\";","import io from 'socket.io-client';\n\nvar socket;\n\n// Heroku Check.\n// socket = io();\nsocket = io(\"http://localhost:3001\");\n\nfunction createRoom(playerName) {\n    socket.emit('createRoom', playerName);\n}\n\nfunction joinRoom(playerName, roomCode) {\n    socket.emit('joinRoom', { playerName : playerName, roomId : roomCode });\n}\n\nfunction startGame(roomCode) {\n    socket.emit('startGame', roomCode);\n}\n\nfunction roomSubscriber(callback) {\n    socket.on('roomChange', (room) => callback(room, socket.id));\n}\n\nfunction buzz(roomCode) {\n    socket.emit('buzz', roomCode);\n}\n\nfunction socketId() {\n    return socket.id;\n}\n\nexport { createRoom, joinRoom, startGame, roomSubscriber, buzz, socketId }","import React, { Component } from 'react';\nimport { createRoom, joinRoom } from '../api';\n\nimport './Entrance.css';\n\nclass Entrance extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerName: '',\n            roomCode: ''\n        };\n\n        this.handlePlayerNameChange = this.handlePlayerNameChange.bind(this);\n        this.handleRoomCodeChange = this.handleRoomCodeChange.bind(this);\n        this.handleCreateRoom = this.handleCreateRoom.bind(this);\n        this.handleJoinRoom = this.handleJoinRoom.bind(this);\n    }\n\n    handlePlayerNameChange(event) {\n        this.setState({ playerName : event.target.value });\n    }\n\n    handleRoomCodeChange(event) {\n        this.setState({ roomCode : event.target.value.toUpperCase() });\n    }\n\n    handleCreateRoom() {\n        createRoom(this.state.playerName);\n    }\n\n    handleJoinRoom() {\n        joinRoom(this.state.playerName, this.state.roomCode);\n    }\n\n    render() {\n        return (\n            <div className=\"Entrance\">\n                <div className=\"logo\">buzzman</div>\n                <div className=\"divider\"></div>\n                <input type=\"text\" placeholder=\"Enter Your Name\" value={this.state.playerName} onChange={this.handlePlayerNameChange} />\n                {this.state.playerName && (<button onClick={this.handleCreateRoom}>Create Room</button>)}\n                <div className=\"divider\"></div>\n                {this.state.playerName && (\n                    <div>\n                        <input type=\"text\" placeholder=\"Room Code\" value={this.state.roomCode} onChange={this.handleRoomCodeChange} />\n                        {this.state.roomCode && (<button onClick={this.handleJoinRoom}>Join Room</button>)}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Entrance;\n","import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"Header\">\n                <h1>Room Code: <span class=\"room-code\">{this.props.title}</span></h1>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './Buzzer.css';\nimport { buzz, socketId } from \"../api\";\n\nclass Buzzer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            timeLeft : 50,\n            timerInterval : 0,\n        };\n\n        this.handleBuzz = this.handleBuzz.bind(this);\n    }\n\n    decrementTimer() {\n        if (this.state.timeLeft > 0) {\n            setTimeout(() => {\n                this.setState({\n                    timeLeft: this.state.timeLeft - 1,\n                });\n                this.decrementTimer();\n            }, 100)\n        } else {\n            this.setState({\n                timeLeft: 50\n            });\n        }\n    }\n\n    handleBuzz() {\n        buzz(this.props.room.id);\n        this.decrementTimer();\n    }\n\n    render() {\n        let timeLeft = (this.state.timeLeft / 10).toFixed(1);\n\n        return (\n            <div className=\"Buzzer\">\n                {this.props.room.isBuzzed && this.props.room.lastBuzzId == socketId() && (\n                    <div className=\"buzz-button is-buzzing\">\n                        <span className=\"button-text\">{timeLeft}</span>\n                    </div>\n                )}\n                {this.props.room.isBuzzed && this.props.room.lastBuzzId != socketId() && (\n                    <div className=\"buzz-button locked\">\n                        <span className=\"button-text\">{this.props.room.lastBuzzName} BUZZED</span>\n                    </div>\n                )}\n                {!this.props.room.isBuzzed && (\n                    <div className=\"buzz-button\" onClick={this.handleBuzz}>\n                        <span className=\"button-text\">BUZZ</span>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Buzzer;\n","import React, { Component } from 'react';\nimport ReactHowler from 'react-howler';\n\nimport Header from './Header';\nimport Buzzer from './Buzzer';\n\nimport buzzSound from '../sounds/buzzSound.mp3';\n\nimport './Lobby.css';\n\nclass Lobby extends Component {\n    render() {\n        return (\n            <div className=\"Lobby\">\n                <Header title={this.props.room.id} />\n                <div className=\"wrapper\">\n                    <h2>Players</h2>\n                    <div className=\"player-container\">\n                    { Object.values(this.props.room.players).map((player) => {\n                        return (\n                            <div key={player.id} className={\"player \" + ((player.id === this.props.room.lastBuzzId && this.props.room.isBuzzed) ? 'active' : '')}>\n                                <span class=\"player-name\">{player.name}</span>\n                            </div>\n                        );\n                    })}\n                    </div>\n                    <Buzzer room={this.props.room} />\n                    <ReactHowler src={buzzSound} playing={this.props.room.isBuzzed} preload={true} loop={false} ref={(ref) => (this.player = ref)} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Lobby;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Entrance from './components/Entrance.js';\nimport Lobby from './components/Lobby.js';\n\nimport { roomSubscriber } from './api';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      room: {},\n    };\n\n    roomSubscriber((data, socketId) => {\n      data.room.thisPlayer = socketId;\n      this.setState({ room : data.room })\n    });\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          {\n            (Object.keys(this.state.room).length === 0) && (\n                <Entrance/>\n            )\n          }\n          {\n            (this.state.room.stage === 'lobby') && (\n                <Lobby room={this.state.room} />\n            )\n          }\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}